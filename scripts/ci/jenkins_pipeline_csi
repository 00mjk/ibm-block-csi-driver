pipeline {
    environment {
        registryCredential = 'MatanStgArtifactory'
        artifactory_path = 'build/reports/images_url'
        registryUrl = 'https://stg-artifactory.haifa.ibm.com:5030'
    }
    agent {
        label  "${env.AGENT_LABEL}"
    }
    stages {
        stage ('CSI-controller: static code analysis') {
            steps {
                sh './scripts/run_static_code_analysis.sh'
            }
        }
        stage ('CSI-controller: Unit testing + coverage') {
            steps {
                sh 'mkdir -p build/reports && chmod 777 build/reports'
                sh './scripts/run_unitests.sh `pwd`/build/reports'
            }
        }
        stage ('CSI-node: go local tests') {
            steps {
                sh 'mkdir -p build/reports && chmod 777 build/reports'
                sh 'make test-xunit-in-container'
            }
        }
        stage ('CSI-deployment: k8s yamls validation') {
            steps {
                sh './scripts/run_yamlcheck.sh'
            }
        }
        stage ('Pre-build actions') {
            steps { 
                script {
                    // not sure if docker accept / in the version
                    branch = sh(script:"echo $GIT_BRANCH | sed 's|/|.|g'",returnStdout:true).trim()
                    specific_tag = "${IMAGE_VERSION}_b${BUILD_NUMBER}_${branch}"
                }
            }
        }
        stage ('Build docker images') {
            steps {
                script {
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        controller_image_latest = docker.build("${CSI_CONTROLLER_IMAGE}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-controller .")
                        controller_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${CSI_CONTROLLER_IMAGE}:${specific_tag}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-controller .")
                        node_image_latest = docker.build("${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-node .")
                        node_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}:${specific_tag}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-node .")
                    } else {
                        controller_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${CSI_CONTROLLER_IMAGE}:$specific_tag", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-controller .")
                        node_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}:$specific_tag", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f Dockerfile-csi-node .")
					}
                }
            }
        }
        stage ('push docker images') {
            steps {
                script {
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        docker.withRegistry(registryUrl, registryCredential ) {
                            controller_image_latest.push()
                            controller_image_with_generated_tag.push()
                            node_image_latest.push()
                            node_image_with_generated_tag.push()
                        }
                    } else {
                        docker.withRegistry(registryUrl, registryCredential ) {
                            controller_image_with_generated_tag.push()
                            node_image_with_generated_tag.push()
			            }
		            }
                }
            }
        }
        stage ('Save Artifactes') {
            steps {
                script {
                    sh 'dirname ${artifactory_path} | xargs mkdir -p'
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        sh "echo ${DOCKER_REGISTRY}/${CSI_CONTROLLER_IMAGE}:$specific_tag > ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}:$specific_tag >> ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${CSI_CONTROLLER_IMAGE}:latest >> ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}:latest >> ${artifactory_path}"
                    } else {
                        sh "echo ${DOCKER_REGISTRY}/${CSI_CONTROLLER_IMAGE}:$specific_tag > ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${CSI_NODE_IMAGE}:$specific_tag >> ${artifactory_path}"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                manager.addShortText("${env.GIT_BRANCH}")
            }
            sh 'ls -la build/reports/'
            junit 'build/reports/*.xml'
            // cobertura coberturaReportFile: 'build/reports/*.xml'   ## TODO: CSI-103 need to run cobertura but it has an issue "No such DSL method"
            archiveArtifacts 'build/reports/images_url'
        }

        failure {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        unstable {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Unstable build in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        changed {
            emailext body: 'Check console output at $BUILD_URL to view the results.',
                    to: "${env.EMAIL_TO}",
                    subject: 'Jenkins build is back to normal: $PROJECT_NAME - #$BUILD_NUMBER'
        }

        cleanup {
            script {
                sh '[ -d build/reports ] && rm -rf build/reports'
            }
        }

    }
}